# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wiBYnohMRd_Ge4XYBhEtEKBka2ItF9ZQ
"""

from numpy import random
import numpy as np
import matplotlib.pyplot as plt
import itertools
import scipy.stats as stats
from scipy.stats import chi2
import matplotlib.pyplot as plt
import seaborn as sns

def simulate_revenue(
    price_business,
    price_leisure,
    price_student,
    seats=100,
    max_student=20,
    rsv_business=40,
    num_simulations=50,
    label=None,
):
    """
    模拟航空定价收入，按照客户到达顺序售票
    """
    revenues = []

    for _ in range(num_simulations):
        # 随机生成各类客户数量
        num_students = max(0, int(np.random.normal(100, 30)))
        num_leisure = max(0, int(np.random.normal(80, 20)))
        num_business = max(0, int(np.random.normal(50, 10)))

        # 生成各类客户的支付意愿
        student_wtp = chi2.rvs(df=2, size=num_students) * 100 / 2
        leisure_wtp = chi2.rvs(df=5, size=num_leisure) * 125 / 5
        business_wtp = chi2.rvs(df=10, size=num_business) * 300 / 10

        # 创建所有客户列表，保持随机顺序
        customers = (
            [(wtp, "student") for wtp in student_wtp]
            + [(wtp, "leisure") for wtp in leisure_wtp]
            + [(wtp, "business") for wtp in business_wtp]
        )

        # 初始化计数器
        sold = 0
        revenue = 0
        rsv_bl = seats - max_student
        i = 0
        total_customers = len(customers)

        # 模拟售票过程
        while i < total_customers and sold < seats:
            wtp, customer_type = customers[i]

            # 确定当前可售票种和价格
            if sold < seats - rsv_bl and i < num_students:
                # 可以卖学生票
                current_price = price_student
                if wtp >= current_price:
                    revenue += current_price
                    sold += 1

            elif sold < seats - rsv_business and i < (num_students + num_leisure):
                # 可以卖leisure票
                current_price = price_leisure
                if wtp >= current_price:
                    revenue += current_price
                    sold += 1

            else:
                # 只能卖business票
                current_price = price_business
                if wtp >= current_price:
                    revenue += current_price
                    sold += 1

            i += 1

        revenues.append(revenue)
                # ... (Your simulate_revenue function and its call) ...

        # Plot the density distribution curve using seaborn
    sns.kdeplot(revenues)

    # Calculate and plot the mean line
    mean_revenue = np.mean(revenues)
    plt.axvline(mean_revenue, color='red', linestyle='--', label='Mean')  # Change label here


    plt.xlabel("Revenue")
    plt.ylabel("Density")
    plt.title(f'Density Distribution of Revenue with Mean Line{np.mean(revenues)}')
    plt.legend()

    # Set x-axis ticker to 1000
    plt.xticks(np.arange(5000, 20000, 2000))

    plt.show()

    return np.mean(revenues), np.std(revenues), np.min(revenues), np.max(revenues),revenues

def simulate_revenue(
    price_business,
    price_leisure,
    price_student,
    seats=100,
    max_student=20,
    rsv_business=40,
    num_simulations=100,
    label=None,
):
    """
    模拟航空定价收入，按照客户到达顺序售票
    """
    revenues = []

    for _ in range(num_simulations):
        # 随机生成各类客户数量
        num_students = max(0, int(np.random.normal(100, 30)))
        num_leisure = max(0, int(np.random.normal(80, 20)))
        num_business = max(0, int(np.random.normal(50, 1)))

        # 生成各类客户的支付意愿
        student_wtp = chi2.rvs(df=2, size=num_students) * 100 / 2
        leisure_wtp = chi2.rvs(df=5, size=num_leisure) * 125 / 5
        business_wtp = chi2.rvs(df=10, size=num_business) * 300 / 10

        # 创建所有客户列表，保持随机顺序
        customers = (
            [(wtp, "student") for wtp in student_wtp]
            + [(wtp, "leisure") for wtp in leisure_wtp]
            + [(wtp, "business") for wtp in business_wtp]
        )

        # 初始化计数器
        sold = 0
        revenue = 0
        rsv_bl = seats - max_student
        i = 0
        total_customers = len(customers)

        # 模拟售票过程
        while i < total_customers and sold < seats:
            wtp, customer_type = customers[i]

            # 确定当前可售票种和价格
            if sold < seats - rsv_bl and i < num_students:
                # 可以卖学生票
                current_price = price_student
                if wtp >= current_price:
                    revenue += current_price
                    sold += 1

            elif sold < seats - rsv_business and i < (num_students + num_leisure):
                # 可以卖leisure票
                current_price = price_leisure
                if wtp >= current_price:
                    revenue += current_price
                    sold += 1

            else:
                # 只能卖business票
                current_price = price_business
                if wtp >= current_price:
                    revenue += current_price
                    sold += 1

            i += 1

        revenues.append(revenue)
                # ... (Your simulate_revenue function and its call) ...

        # Plot the density distribution curve using seaborn
    # sns.kdeplot(revenues)

    # # Calculate and plot the mean line
    # mean_revenue = np.mean(revenues)
    # plt.axvline(mean_revenue, color='red', linestyle='--', label='Mean')  # Change label here


    # plt.xlabel("Revenue")
    # plt.ylabel("Density")
    # plt.title(f'Density Distribution of Revenue with Mean Line{np.mean(revenues)}')
    # plt.legend()

    # # Set x-axis ticker to 1000
    # plt.xticks(np.arange(5000, 20000, 2000))

    # plt.show()

    return np.mean(revenues), np.std(revenues), np.min(revenues), np.max(revenues),revenues

def simulate_multiple_strategies():
    """模拟多个定价策略并在一张图上展示所有结果"""

    # 定义要测试的策略组合
    strategies = [
        {
            'price_business': 230,
            'price_leisure': 130,
            'price_student': 120,
            'max_student': 5,
            'rsv_business': 35,
            'label': 'Strategy 1'
        },
        {
            'price_business': 280,
            'price_leisure': 150,
            'price_student': 140,
            'max_student': 5,
            'rsv_business': 30,
            'label': 'Strategy 2'
        },
        {
            'price_business': 240,
            'price_leisure': 140,
            'price_student': 120,
            'max_student': 10,
            'rsv_business': 30,
            'label': 'Strategy 3'
        },
        {
            'price_business': 260,
            'price_leisure': 150,
            'price_student': 120,
            'max_student': 10,
            'rsv_business': 25,
            'label': 'Strategy 4'
        },
        {
            'price_business': 200,
            'price_leisure': 130,
            'price_student': 120,
            'max_student': 10,
            'rsv_business': 40,
            'label': 'Strategy 5'
        },
        {
            'price_business': 200,
            'price_leisure': 130,
            'price_student': 120,
            'max_student': 20,
            'rsv_business': 40,
            'label': 'Strategy 6'
        },
          {
            'price_business': 260,
            'price_leisure': 130,
            'price_student': 120,
            'max_student': 10,
            'rsv_business': 30,
            'label': 'Strategy 7'
        },
          {
            'price_business': 220,
            'price_leisure': 130,
            'price_student': 120,
            'max_student': 5,
            'rsv_business': 38,
            'label': 'Strategy 7'
        },
          {
            'price_business': 240,
            'price_leisure': 140,
            'price_student': 120,
            'max_student': 0,
            'rsv_business': 10,
            'label': 'Strategy 8'
        }
    ]

    # 创建一个大图
    plt.figure(figsize=(15, 8))

    # 为不同策略使用不同颜色
    colors = ['blue', 'red', 'green', 'purple', 'orange', 'brown', 'black', 'yellow', 'pink']

    # 绘制每个策略的分布曲线
    for idx, strategy in enumerate(strategies):
        mean_rev, std_rev, min_rev, max_rev, revenues = simulate_revenue(
            price_business=strategy['price_business'],
            price_leisure=strategy['price_leisure'],
            price_student=strategy['price_student'],
            seats=100,
            max_student=strategy['max_student'],
            rsv_business=strategy['rsv_business'],
            num_simulations=50000
        )

        # 绘制密度分布曲线
        sns.kdeplot(
            revenues,
            color=colors[idx % len(colors)],
            label=f"{strategy['label']}\nMean: {mean_rev:.0f}\nStd: {std_rev:.0f}",
            linewidth=2
        )

        # 绘制平均值线
        plt.axvline(
            mean_rev,
            color=colors[idx % len(colors)],
            linestyle='--',
            alpha=0.5
        )

    plt.xlabel("Revenue (CNY)")
    plt.ylabel("Density")
    plt.title("Revenue Distribution Comparison for Different Strategies")
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.xticks(np.arange(5000, 20000, 1000))

    # 调整布局以确保图例完全显示
    plt.tight_layout()
    plt.show()


# 运行模拟和绘图
simulate_multiple_strategies()

